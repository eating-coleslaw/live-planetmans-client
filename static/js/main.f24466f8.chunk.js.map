{"version":3,"sources":["services/planetsideWorlds.js","components/TopPlayers.js","components/App.js","reportWebVitals.js","index.js"],"names":["planetsideWorlds","worlds","id","name","getWorldFromId","worldId","find","world","getTopPlayers","a","fetch","method","response","json","responseJson","players","TopPlayers","useState","playersList","setPlayersList","useEffect","mounted","playerItems","map","player","outfitAlias","className","kills","deaths","suicides","teamkills","headshots","fetchData","length","Table","hover","size","responsive","App","setWorldId","worldItems","isActive","NavDropdown","Item","eventKey","onSelect","updateWorldId","active","newWorldId","Number","parseInt","Navbar","variant","bg","expand","Container","fluid","Brand","href","Toggle","Collapse","Nav","title","menuvariant","style","Row","Col","xs","md","Card","Body","Title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f24466f8.chunk.js","sourcesContent":["const planetsideWorlds = (() => {\r\n  const worlds = [\r\n    {\r\n      id: 1,\r\n      name: \"Connery\",\r\n    },\r\n    {\r\n      id: 17,\r\n      name: \"Emerald\",\r\n    },\r\n    {\r\n      id: 10,\r\n      name: \"Miller\",\r\n    },\r\n    {\r\n      id: 13,\r\n      name: \"Cobalt\",\r\n    },\r\n    {\r\n      id: 40,\r\n      name: \"SolTech\",\r\n    },\r\n    {\r\n      id: 19,\r\n      name: \"Jaeger\",\r\n    },\r\n  ];\r\n\r\n  const getWorldFromId = (worldId) => worlds.find((world) => world.id === worldId);\r\n\r\n  return {\r\n    worlds,\r\n    getWorldFromId,\r\n  };\r\n})();\r\n\r\nexport default planetsideWorlds;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport planetsideWorlds from \"../services/planetsideWorlds\";\r\n\r\nasync function getTopPlayers(worldId) {\r\n  // const response = await fetch(`https://localhost:5001/activity/worlds/${worldId}/players`, {\r\n  const response = await fetch(\r\n    `https://localhost:49189/activity/worlds/${worldId}/players`,\r\n    {\r\n      method: \"GET\",\r\n    }\r\n  );\r\n\r\n  const responseJson = await response.json();\r\n\r\n  //   console.log(responseJson);\r\n\r\n  return responseJson.players;\r\n}\r\n\r\nexport default function TopPlayers({ worldId }) {\r\n  const [playersList, setPlayersList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n\r\n    async function fetchData() {\r\n      const players = await getTopPlayers(worldId);\r\n\r\n      //   console.log(players);\r\n\r\n      const playerItems = players.map((player) => {\r\n        const outfitAlias = !!player.outfitAlias\r\n          ? `[${player.outfitAlias}]`\r\n          : \"\";\r\n\r\n        return (\r\n          <tr key={player.name} className=\"\">\r\n            <td>{outfitAlias}</td>\r\n            <td>{player.name}</td>\r\n            <td>{player.kills}</td>\r\n            <td>{player.deaths}</td>\r\n            <td>{player.suicides}</td>\r\n            <td>{player.teamkills}</td>\r\n            <td>{player.headshots}</td>\r\n          </tr>\r\n        );\r\n      });\r\n\r\n      if (mounted) {\r\n        setPlayersList(playerItems);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n\r\n    return () => (mounted = false);\r\n  }, [worldId]);\r\n\r\n  if (playersList.length === 0) {\r\n    return (\r\n      <div className=\"\">\r\n        <p>There are no players to display.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Table hover size=\"sm\" responsive=\"md\">\r\n      <thead>\r\n        <tr>\r\n          <th></th>\r\n          <th>Player</th>\r\n          <th>Kills</th>\r\n          <th>Deaths</th>\r\n          <th>Suicides</th>\r\n          <th>Teamkills</th>\r\n          <th>Headshots</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>{playersList}</tbody>\r\n    </Table>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport TopPlayers from \"./TopPlayers\";\r\nimport {\r\n  Nav,\r\n  Navbar,\r\n  Card,\r\n  DropdownButton,\r\n  Dropdown,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  NavDropdown,\r\n} from \"react-bootstrap\";\r\nimport planetsideWorlds from \"../services/planetsideWorlds\";\r\n\r\nimport \"../styles/App.css\";\r\n\r\nexport default function App() {\r\n  const [worldId, setWorldId] = useState(17);\r\n\r\n  const worldItems = planetsideWorlds.worlds.map((world) => {\r\n    const isActive = worldId === world.id;\r\n\r\n    return (\r\n      <NavDropdown.Item\r\n        key={world.id}\r\n        eventKey={world.id}\r\n        onSelect={updateWorldId}\r\n        active={isActive}\r\n      >\r\n        {world.name}\r\n      </NavDropdown.Item>\r\n    );\r\n  });\r\n\r\n  function updateWorldId(newWorldId) {\r\n    setWorldId(Number.parseInt(newWorldId));\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Navbar variant=\"dark\" bg=\"dark\" expand=\"lg\">\r\n        <Container fluid>\r\n          <Navbar.Brand href=\"/\">squittal.LivePlanetmans</Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"site navigation\" />\r\n          <Navbar.Collapse id=\"site-navbar\">\r\n            <Nav>\r\n              <NavDropdown\r\n                id=\"nav-dropdown-world\"\r\n                title=\"Server\"\r\n                menuvariant=\"dark\"\r\n              >\r\n                {worldItems}\r\n              </NavDropdown>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n\r\n      <Container variant=\"dark\" style={{ 'margin-top': '1em' }}>\r\n        <Row>\r\n          <Col xs={12} md={8}>\r\n            <Card>\r\n              <Card.Body>\r\n                <Card.Title>\r\n                  Top Players for {planetsideWorlds.getWorldFromId(worldId)?.name}\r\n                </Card.Title>\r\n                <TopPlayers worldId={worldId} />\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}